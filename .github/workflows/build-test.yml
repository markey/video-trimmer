name: Build Test

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'

jobs:
  test-build:
    name: Test Build
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup platform-specific tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl tar xz-utils
          
      - name: Setup platform-specific tools (macOS)
        if: runner.os == 'macOS'
        run: |
          # macOS should have curl and tar by default
          # Install unzip if needed
          if ! command -v unzip &> /dev/null; then
            brew install unzip
          fi
          
      - name: Setup platform-specific tools (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows should have PowerShell by default
          # Check if we have required tools
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          Write-Host "Current directory: $(Get-Location)"
          
      - name: Download external dependencies
        run: |
          echo "Platform: $RUNNER_OS"
          echo "Node version: $(node --version)"
          echo "Current directory: $(pwd)"
          echo "Contents of scripts/:"
          if [ "$RUNNER_OS" = "Windows" ]; then
            dir scripts
          else
            ls -la scripts
          fi
          echo "Attempting to download dependencies..."
          node scripts/download-deps.js
        
      - name: Build application
        run: npm run build
        
      - name: Verify build output
        run: |
          # Check that main files exist
          if [ "$RUNNER_OS" = "Windows" ]; then
            if (!(Test-Path "out/main.js")) { 
              Write-Error "❌ main.js not found"
              exit 1 
            }
            if (!(Test-Path "out/preload.cjs")) { 
              Write-Error "❌ preload.cjs not found"
              exit 1 
            }
            if (!(Test-Path "dist/renderer")) { 
              Write-Error "❌ renderer directory not found"
              exit 1 
            }
          else
            if [ ! -f "out/main.js" ]; then
              echo "❌ main.js not found"
              exit 1
            fi
            if [ ! -f "out/preload.cjs" ]; then
              echo "❌ preload.cjs not found"
              exit 1
            fi
            if [ ! -d "dist/renderer" ]; then
              echo "❌ renderer directory not found"
              exit 1
            fi
          fi
          echo "✅ Build verification passed"
          
      - name: Check external dependencies
        run: |
          # Verify that external dependencies were downloaded
          if [ "$RUNNER_OS" = "Windows" ]; then
            if (!(Test-Path "bin/ffmpeg.exe")) { 
              Write-Error "❌ ffmpeg not found"
              exit 1 
            }
            if (!(Test-Path "bin/ffprobe.exe")) { 
              Write-Error "❌ ffprobe not found"
              exit 1 
            }
            if (!(Test-Path "bin/yt-dlp.exe")) { 
              Write-Error "❌ yt-dlp not found"
              exit 1 
            }
          else
            if [ ! -f "bin/ffmpeg" ] && [ ! -f "bin/ffmpeg.exe" ]; then
              echo "❌ ffmpeg not found"
              exit 1
            fi
            if [ ! -f "bin/ffprobe" ] && [ ! -f "bin/ffprobe.exe" ]; then
              echo "❌ ffprobe not found"
              exit 1
            fi
            if [ ! -f "bin/yt-dlp" ] && [ ! -f "bin/yt-dlp.exe" ]; then
              echo "❌ yt-dlp not found"
              exit 1
            fi
          fi
          echo "✅ External dependencies verified"
          
      - name: Run type check
        run: npm run typecheck
