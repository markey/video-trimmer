name: Build Test

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'

jobs:
  test-build:
    name: Test Build
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Debug environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== Environment Debug Info ==="
          echo "Runner OS: ${{ runner.os }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Package.json exists: $(if [ -f package.json ]; then echo "Yes"; else echo "No"; fi)"
          echo "==============================="
          
      - name: Debug environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "=== Environment Debug Info ==="
          echo "Runner OS: ${{ runner.os }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          dir
          echo "Package.json exists: $(if (Test-Path "package.json") { echo "Yes" } else { echo "No" })"
          echo "==============================="
        
      - name: Test npm functionality (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== Testing npm functionality ==="
          echo "Testing npm version..."
          npm --version
          echo "Testing npm list..."
          npm list --depth=0 || echo "npm list failed (this might be normal)"
          echo "Testing npm run..."
          npm run --silent || echo "npm run failed (this might be normal)"
          echo "================================"
          
      - name: Test npm functionality (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "=== Testing npm functionality ==="
          echo "Testing npm version..."
          npm --version
          echo "Testing npm list..."
          npm list --depth=0 || echo "npm list failed (this might be normal)"
          echo "Testing npm run..."
          npm run --silent || echo "npm run failed (this might be normal)"
          echo "================================"
        
      - name: Verify package files (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== Verifying package files ==="
          echo "Package.json size: $(if [ -f package.json ]; then wc -l < package.json; else echo "Not found"; fi)"
          echo "Package-lock.json size: $(if [ -f package-lock.json ]; then wc -l < package-lock.json; else echo "Not found"; fi)"
          echo "Node modules exists: $(if [ -d node_modules ]; then echo "Yes"; else echo "No"; fi)"
          echo "================================"
          
      - name: Verify package files (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "=== Verifying package files ==="
          echo "Package.json size: $(if (Test-Path "package.json") { Get-Content "package.json" | Measure-Object -Line | Select-Object -ExpandProperty Lines } else { echo "Not found" })"
          echo "Package-lock.json size: $(if (Test-Path "package-lock.json") { Get-Content "package-lock.json" | Measure-Object -Line | Select-Object -ExpandProperty Lines } else { echo "Not found" })"
          echo "Node modules exists: $(if (Test-Path "node_modules") { echo "Yes" } else { echo "No" })"
          echo "================================"
        
      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Attempting to install dependencies with npm ci..."
          npm ci || {
            echo "npm ci failed, trying npm install instead..."
            npm install
          }
          
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Attempting to install dependencies with npm ci..."
          npm ci || {
            echo "npm ci failed, trying npm install instead..."
            npm install
          }
          
      - name: Verify dependencies installed (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Verifying that dependencies were installed correctly..."
          if [ ! -d "node_modules" ]; then
            echo "❌ node_modules directory not found after npm install"
            exit 1
          fi
          echo "✅ Dependencies installed successfully"
          
      - name: Verify dependencies installed (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Verifying that dependencies were installed correctly..."
          if (!(Test-Path "node_modules")) { 
            Write-Error "❌ node_modules directory not found after npm install"
            exit 1 
          }
          echo "✅ Dependencies installed successfully"
          
      - name: Setup platform-specific tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl tar xz-utils
          
      - name: Setup platform-specific tools (macOS)
        if: runner.os == 'macOS'
        run: |
          # macOS should have curl and tar by default
          # Install unzip if needed
          if ! command -v unzip &> /dev/null; then
            brew install unzip
          fi
          
      - name: Setup platform-specific tools (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows should have PowerShell by default
          # Check if we have required tools
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          Write-Host "Current directory: $(Get-Location)"
          
      - name: Test dependency download (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Testing dependency download on $RUNNER_OS..."
          echo "Current directory: $(pwd)"
          echo "Scripts directory:"
          ls -la scripts/
          echo "Testing download-deps script..."
          node --version
          echo "Attempting to download dependencies..."
          node scripts/download-deps.js
          
      - name: Test dependency download (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Testing dependency download on Windows..."
          echo "Current directory: $(pwd)"
          echo "Scripts directory:"
          dir scripts
          echo "Testing download-deps script..."
          node --version
          echo "Attempting to download dependencies..."
          node scripts/download-deps.js
        
      - name: Test build step by step (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== Testing build step by step ==="
          
          # Test 1: Clean directories
          echo "1. Testing rimraf..."
          npx rimraf dist out || echo "rimraf failed, trying manual cleanup..."
          
          # Test 2: Build renderer
          echo "2. Testing renderer build..."
          npm run build:renderer
          
          # Test 3: Build main process
          echo "3. Testing main process build..."
          npm run build:main
          
          # Test 4: Build preload
          echo "4. Testing preload build..."
          npm run build:preload
          
          echo "=== All build steps completed ==="
        
      - name: Test build step by step (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "=== Testing build step by step ==="
          
          # Test 1: Clean directories
          echo "1. Testing rimraf..."
          npx rimraf dist out || echo "rimraf failed, trying manual cleanup..."
          
          # Test 2: Build renderer
          echo "2. Testing renderer build..."
          npm run build:renderer
          
          # Test 3: Build main process
          echo "3. Testing main process build..."
          npm run build:main
          
          # Test 4: Build preload
          echo "4. Testing preload build..."
          npm run build:preload
          
          echo "=== All build steps completed ==="
        
      - name: Debug build output (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== Build Output Debug ==="
          echo "Checking out/ directory:"
          if [ -d "out" ]; then ls -la out; else echo "out directory does not exist"; fi
          echo "Checking dist/ directory:"
          if [ -d "dist" ]; then ls -la dist; else echo "dist directory does not exist"; fi
          echo "Checking bin/ directory:"
          if [ -d "bin" ]; then ls -la bin; else echo "bin directory does not exist"; fi
          echo "=========================="
          
      - name: Debug build output (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "=== Build Output Debug ==="
          echo "Checking out/ directory:"
          if (Test-Path "out") { dir out } else { echo "out directory does not exist" }
          echo "Checking dist/ directory:"
          if (Test-Path "dist") { dir dist } else { echo "dist directory does not exist" }
          echo "Checking bin/ directory:"
          if (Test-Path "bin") { dir bin } else { echo "bin directory does not exist" }
          echo "=========================="
        
      - name: Verify build output (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # Check that main files exist
          if [ ! -f "out/main.js" ]; then
            echo "❌ main.js not found"
            exit 1
          fi
          if [ ! -f "out/preload.cjs" ]; then
            echo "❌ preload.cjs not found"
            exit 1
          fi
          if [ ! -d "dist/renderer" ]; then
            echo "❌ renderer directory not found"
            exit 1
          fi
          echo "✅ Build verification passed"
          
      - name: Verify build output (Windows)
        if: runner.os == 'Windows'
        run: |
          # Check that main files exist
          if (!(Test-Path "out/main.js")) { 
            Write-Error "❌ main.js not found"
            exit 1 
          }
          if (!(Test-Path "out/preload.cjs")) { 
            Write-Error "❌ preload.cjs not found"
            exit 1 
          }
          if (!(Test-Path "dist/renderer")) { 
            Write-Error "❌ renderer directory not found"
            exit 1 
          }
          echo "✅ Build verification passed"
          
      - name: Check external dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # Verify that external dependencies were downloaded
          if [ ! -f "bin/ffmpeg" ] && [ ! -f "bin/ffmpeg.exe" ]; then
            echo "❌ ffmpeg not found"
            exit 1
          fi
          if [ ! -f "bin/ffprobe" ] && [ ! -f "bin/ffprobe.exe" ]; then
            echo "❌ ffprobe not found"
            exit 1
          fi
          if [ ! -f "bin/yt-dlp" ] && [ ! -f "bin/yt-dlp.exe" ]; then
            echo "❌ yt-dlp not found"
            exit 1
          fi
          echo "✅ External dependencies verified"
          
      - name: Check external dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Verify that external dependencies were downloaded
          if (!(Test-Path "bin/ffmpeg.exe")) { 
            Write-Error "❌ ffmpeg not found"
            exit 1 
          }
          if (!(Test-Path "bin/ffprobe.exe")) { 
            Write-Error "❌ ffprobe not found"
            exit 1 
          }
          if (!(Test-Path "bin/yt-dlp.exe")) { 
            Write-Error "❌ yt-dlp not found"
            exit 1 
          }
          echo "✅ External dependencies verified"
          
      - name: Run type check (Linux/macOS)
        if: runner.os != 'Windows'
        run: npm run typecheck
        
      - name: Run type check (Windows)
        if: runner.os == 'Windows'
        run: npm run typecheck
